/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyEmailImport } from './routes/verify-email'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as ForgotPasswordImport } from './routes/forgot-password'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthUsersImport } from './routes/_auth.users'
import { Route as AuthProfileImport } from './routes/_auth.profile'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'
import { Route as AuthAccountImport } from './routes/_auth.account'
import { Route as AuthUsersUserIdImport } from './routes/_auth.users.$userId'

// Create/Update Routes

const VerifyEmailRoute = VerifyEmailImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthUsersRoute = AuthUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAccountRoute = AuthAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AuthRoute,
} as any)

const AuthUsersUserIdRoute = AuthUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => AuthUsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/verify-email': {
      id: '/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof VerifyEmailImport
      parentRoute: typeof rootRoute
    }
    '/_auth/account': {
      id: '/_auth/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthAccountImport
      parentRoute: typeof AuthImport
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users': {
      id: '/_auth/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users/$userId': {
      id: '/_auth/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthUsersUserIdImport
      parentRoute: typeof AuthUsersImport
    }
  }
}

// Create and export the route tree

interface AuthUsersRouteChildren {
  AuthUsersUserIdRoute: typeof AuthUsersUserIdRoute
}

const AuthUsersRouteChildren: AuthUsersRouteChildren = {
  AuthUsersUserIdRoute: AuthUsersUserIdRoute,
}

const AuthUsersRouteWithChildren = AuthUsersRoute._addFileChildren(
  AuthUsersRouteChildren,
)

interface AuthRouteChildren {
  AuthAccountRoute: typeof AuthAccountRoute
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthUsersRoute: typeof AuthUsersRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAccountRoute: AuthAccountRoute,
  AuthDashboardRoute: AuthDashboardRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthUsersRoute: AuthUsersRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/verify-email': typeof VerifyEmailRoute
  '/account': typeof AuthAccountRoute
  '/dashboard': typeof AuthDashboardRoute
  '/profile': typeof AuthProfileRoute
  '/users': typeof AuthUsersRouteWithChildren
  '/users/$userId': typeof AuthUsersUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/verify-email': typeof VerifyEmailRoute
  '/account': typeof AuthAccountRoute
  '/dashboard': typeof AuthDashboardRoute
  '/profile': typeof AuthProfileRoute
  '/users': typeof AuthUsersRouteWithChildren
  '/users/$userId': typeof AuthUsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/verify-email': typeof VerifyEmailRoute
  '/_auth/account': typeof AuthAccountRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_auth/users': typeof AuthUsersRouteWithChildren
  '/_auth/users/$userId': typeof AuthUsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/verify-email'
    | '/account'
    | '/dashboard'
    | '/profile'
    | '/users'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/verify-email'
    | '/account'
    | '/dashboard'
    | '/profile'
    | '/users'
    | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/verify-email'
    | '/_auth/account'
    | '/_auth/dashboard'
    | '/_auth/profile'
    | '/_auth/users'
    | '/_auth/users/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  VerifyEmailRoute: typeof VerifyEmailRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  VerifyEmailRoute: VerifyEmailRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/forgot-password",
        "/login",
        "/register",
        "/reset-password",
        "/verify-email"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/account",
        "/_auth/dashboard",
        "/_auth/profile",
        "/_auth/users"
      ]
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/verify-email": {
      "filePath": "verify-email.tsx"
    },
    "/_auth/account": {
      "filePath": "_auth.account.tsx",
      "parent": "/_auth"
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth.profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/users": {
      "filePath": "_auth.users.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/users/$userId"
      ]
    },
    "/_auth/users/$userId": {
      "filePath": "_auth.users.$userId.tsx",
      "parent": "/_auth/users"
    }
  }
}
ROUTE_MANIFEST_END */
