services:
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      target: ${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:5173"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=${API_URL:-http://localhost:3001/api}
      - VITE_INTERNAL_API_URL=${INTERNAL_API_URL:-http://backend:3002/api}
      - VITE_APP_ENV=${NODE_ENV:-development}
      - PORT=5173
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages
      - /app/apps/frontend/node_modules
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://0.0.0.0:5173/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: ${NODE_ENV:-development}
    ports:
      - "${BACKEND_PORT:-3001}:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3002
      - FRONTEND_URL=http://frontend:5173
      # Database
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-fullstack_db}
      - DB_USERNAME=${DB_USERNAME:-user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      # Redis/KeyDB
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # RabbitMQ
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-user}:${RABBITMQ_DEFAULT_PASS:-password}@rabbitmq:5672/
      # NATS
      - NATS_HOST=nats
      - NATS_PORT=4222
      - NATS_USERNAME=${NATS_USERNAME:-nats}
      - NATS_PASSWORD=${NATS_PASSWORD:-password}
    volumes:
      - ./:/app
      - backend_node_modules:/app/node_modules
      - backend_dist:/app/dist
    depends_on:
      mysql:
        condition: service_healthy
      keydb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3002/api/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M

  python:
    build:
      context: .
      dockerfile: apps/python/Dockerfile
      target: ${NODE_ENV:-development}
    ports:
      - "${PYTHON_PORT:-8000}:8000"
    environment:
      - PYTHON_APP_ENV=${NODE_ENV:-development}
      - PYTHON_DEBUG=${PYTHON_DEBUG:-true}
      - PYTHON_LOG_LEVEL=${PYTHON_LOG_LEVEL:-DEBUG}
      # RabbitMQ
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-user}:${RABBITMQ_DEFAULT_PASS:-password}@rabbitmq:5672/
      # NATS
      - NATS_HOST=nats
      - NATS_PORT=4222
      - NATS_USERNAME=${NATS_USERNAME:-nats}
      - NATS_PASSWORD=${NATS_PASSWORD:-password}
      # NestJS Backend
      - NESTJS_OPENAPI_URL=http://backend:3002/api-json
    volumes:
      - ./apps/python:/app
      - python_models:/app/app/models
    depends_on:
      rabbitmq:
        condition: service_healthy
      nats:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  mysql:
    image: mysql:8.0
    command: >
      --authentication-policy=caching_sha2_password --innodb-buffer-pool-size=64M --max-connections=20 --table-open-cache=200 --key-buffer-size=16M --thread-cache-size=4 --tmp-table-size=16M --max-heap-table-size=16M --performance-schema=0 --sort-buffer-size=2M --read-buffer-size=256K --read-rnd-buffer-size=512K --net-buffer-length=8K
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: ${DB_DATABASE:-fullstack_db}
      MYSQL_USER: ${DB_USERNAME:-user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fullstack-network
    deploy:
      resources:
        limits:
          memory: 256M

  keydb:
    image: eqalpha/keydb:latest
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - keydb_data:/data
    command: keydb-server --protected-mode no --save 60 1 --loglevel warning
    healthcheck:
      test: [ "CMD", "keydb-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      fullstack-network:
        aliases:
          - redis
    deploy:
      resources:
        limits:
          memory: 128M

  nats:
    image: nats:latest
    ports:
      - "${NATS_PORT:-4222}:4222"
      - "${NATS_MONITORING_PORT:-8222}:8222"
    environment:
      - NATS_USERNAME=${NATS_USERNAME:-nats}
      - NATS_PASSWORD=${NATS_PASSWORD:-password}
    command: >
      --jetstream --user ${NATS_USERNAME:-nats} --pass ${NATS_PASSWORD:-password}
    volumes:
      - nats_data:/data
    networks:
      - fullstack-network
    deploy:
      resources:
        limits:
          memory: 128M

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-password}
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE:-secret_cookie}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - fullstack-network
    deploy:
      resources:
        limits:
          memory: 256M

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - fullstack-network

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - fullstack-network

  # Supporting Services
  redis-commander:
    image: rediscommander/redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=keydb
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    depends_on:
      - keydb
    networks:
      - fullstack-network

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - fullstack-network

volumes:
  mysql_data:
  keydb_data:
  rabbitmq_data:
  nats_data:
  prometheus_data:
  pgadmin_data:
  backend_node_modules:
  backend_dist:
  python_models:


networks:
  fullstack-network:
    driver: bridge
